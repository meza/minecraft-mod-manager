name: Verify and Release

permissions:
  issues: write
  checks: write
  contents: write
  pull-requests: write

on:
  - push
  - pull_request

env:
  LEFTHOOK: 0

jobs:
  build-push-artifacts:
    name: ðŸ“¦ Build artifacts for the commit (for internal use only)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up node
        uses: ./.github/actions/setup/
        with:
          cache-name: binaries

      - run: pnpm clean
      - run: ./scripts/prepare.sh ./src/version.ts dev-${{ github.job_id }}-${{ github.sha }}
        env:
          HELP_URL: ${{github.server_url}}/${{github.repository}}/blob/${{github.sha}}/README.md
          CURSEFORGE_API_KEY: ${{ secrets.CURSEFORGE_API_KEY }}
          MODRINTH_API_KEY: ${{ secrets.MODRINTH_API_KEY }}
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
      - run: pnpm build
      - run: pnpm build:binaries
      - run: ./scripts/binaries.sh

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: Dev Binaries for testing purposes
          path: dist/pkg/**/mmm*

  verify:
    name: ðŸ”Ž Lint and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up node
        uses: ./.github/actions/setup/
        with:
          cache-name: pure-dependencies
      - run: pnpm run ci
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: always()
        with:
          junit_files: "reports/junit.xml"
      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        if: always()
        with:
          format: markdown
          output: file
          hide_complexity: false
          badge: true
          filename: "reports/coverage/unit/cobertura-coverage.xml"
      - name: Publish code coverage report
        if: always()
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

      - run: npx semantic-release --dry-run
        id: get-next-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      new-release-published: ${{ steps.get-next-version.outputs.new-release-published }}
      new-release-version: ${{ steps.get-next-version.outputs.new-release-version }}

  release:
    needs: [ verify, build-push-artifacts ]
    if: needs.verify.outputs.new-release-published == 'true'
    name: Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up node
        uses: ./.github/actions/setup/

      - name: ðŸš€ Build & Release
        env:
          HELP_URL: ${{github.server_url}}/${{github.repository}}/blob/${{github.sha}}/README.md
          CURSEFORGE_API_KEY: ${{ secrets.CURSEFORGE_API_KEY }}
          MODRINTH_API_KEY: ${{ secrets.MODRINTH_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: pnpm release
